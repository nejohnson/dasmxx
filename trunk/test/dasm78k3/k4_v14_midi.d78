###############################################################################
#
# Kawai K4 v1.4 ROM disassembly command file
#
# Module: MIDI
#
# Neil Johnson
#
###############################################################################

###############################################################################
##
## Global Data
##
###############################################################################

bFE60 Active_MIDI_Status_Byte
bDE57 SysEx_Byte_Counter
bDE56 MIDI_Keyboard_Offset


bbb26 MIDI_Channel
bbb27 MIDI_Tx_Ctrl


bFE61 MIDI_Last_Status_Byte
bfe4c MIDI_Tx_FIFO_Tail
bfe4a MIDI_Tx_FIFO_Head
bd902 MIDI_Tx_FIFO

###############################################################################
##
## Procedures
##
###############################################################################

n30ed
#----------------------------------------------------------
# Function:
#       MIDI_Error_Handler
#
#       Called by serial error interrupt handler.
#
# Args:
#       none
#
# Returns:
#       none
#
# Uses:
#       A
#
# Notes:
#		 !! Executes with interrupts turned off !!
#       Called directly by interupt handler, so needs to be
#       quick and non-blocking.		
#----------------------------------------------------------
.
p30ed MIDI_Error_Handler
k30ed Consume bad byte
k30ef Clear serial interrupt registers
k30f3 Set mode bit
k30f7 Clear $FE60
k30fa Clear $FE5D bit 1
k30fc All done, return to interrupt handler

###############################################################################
##
## Low-Level Transmit Routines - called inside interrupt context
##
###############################################################################

#==========================================================
n39fa
#----------------------------------------------------------
# Function:
#       MIDI_Tx
#
#       Looks like a simple wrapper around a call to 
#			MIDI_FIFO_Tx_Next
#
# Args:
#       none
#
# Returns:
#       none
#
# Uses:
#       none
#
# Notes:
#----------------------------------------------------------
.
p39fa MIDI_Tx


#==========================================================
n3B82
#----------------------------------------------------------
# Function:
#       MIDI_FIFO_Tx_Next
#
# Args:
#       none
#
# Returns:
#       none
#
# Uses:
#       A, B
#
# Notes:
#       Notice the lack of wrap-around on the tail index.
#       This suggests the Tx FIFO is 256 bytes deep, relying
#       on byte (modulo-256) arithmetic to wrap from $FF 
#       to $00 for free.
#----------------------------------------------------------
.
p3B82 MIDI_FIFO_Tx_Next
k3b82 Compare head and tail indicies
k3b85 Branch if data to send
k3b87 No data, turn off Tx
#
k3b8b Get tail index
k3b8f Get next byte from FIFO
k3b93 Bump tail index
k3b95 And save it
k3b98 Load next byte into transmit register
k3b9a Set "tx-in-progress" flag (???)


###############################################################################
##
## Low-Level Receive Routines - called inside interrupt context
##
###############################################################################

#==========================================================
n30fd
#----------------------------------------------------------
# Function:
#       MIDI_Receiver
#
#       Called by serial receive interrupt handler when a
#       new data byte arrives.
#
# Args:
#       none
#
# Returns:
#       none
#
# Uses:
#       A, B, C, DE
#
# Notes:
#		 !! Executes with interrupts turned off !!
#       Called within interrupt context, so needs to be
#       quick and non-blocking.		
#----------------------------------------------------------
.
p30FD MIDI_Receiver
#
k30fd Set some flag
k30ff Get byte from serial peripherals
k3101 If MIDI receive disabled then just return
k3104 Check if status byte (top bit set)
#
k3107 MIDI byte -> C reg
k310a Do we have an active status byte?
k310c If not, ignore this data byte (could be noise)
k310e Is this the start of SysEx?
k3112 If yes, go and deal with it
#
k3117 If $FE60 < $F0 then switch

#
l3123 MR_handle_status_byte
k3123 Is this an active sense byte?
k3127 Yes, set a flag and return
#
l312a MR_check_system_realtime
k312a Is byte 0xF8 or above?
k312c If so, ignore it

k313f Reset sysex counter

#
l314a MR_exit
k314a Exit point
#

k3154 Send MIDI EOX
k3160 Reset running status


v3166 MR_switch_table
c3177 MR_case_0
c31b1 MR_case_1
n3176
Default case
.
c3176 MR_default
c31ef MR_case_3
c333a MR_case_4
c335b MR_case_5
c3372 MR_case_6



#==========================================================
n354e
#----------------------------------------------------------
# Function:
#       MIDI_SysEx_Processor
#
#       Process SysEx bytes
#
# Args:
#       A = active MIDI status byte (should be $F0)
#       C = received data byte
#
# Returns:
#       none
#
# Uses:
#       lots
#
# Notes:
#		 !! Executes with interrupts turned off !!
#       Called within interrupt context, so needs to be
#       non-blocking.		
#----------------------------------------------------------
.
p354E MIDI_SysEx_Processor
k354e Load current sysex state
k3552 Move to LSB of table index
k3554 Clear bottom 6 bits of table index MSB, and check top 2 bits are 00
k3556 If top 2 bits not 00 then illegal sysex state
l355d SysEx_Abandon
k355d Bad sysex, clear active status byte and return

v3561 Branch_Table
c35a1 entry1
c35bc entry2
c35ca entry3
c35f0 entry4
c35f9 entry5
c3613 entry7
c361c entry8
c363e entry9
c3653 entry10
c36c7 entry11
c36de entry12
c3729 entry13
c36d6 entry14
c3732 entry15
c3782 entry16
c37b8 entry17
c38c1 entry18
c3838 entry19
c39c4 entry20
c377c entry21
c386c entry22
c3769 entry23
c39e9 entry24
c39c5 entry25











###############################################################################
##
## General Functions
##
###############################################################################


#==========================================================
n3B54
#----------------------------------------------------------
# Function:
#       MIDI_Tx_FIFO_Push
#
#       Push a byte into the MIDI Tx FIFO
#
# Args:
#       A = MIDI byte to push into the FIFO
#
# Returns:
#       none
#
# Uses:
#       B
#
# Notes:
#       !! Can be called from an interrupt handler !!
#----------------------------------------------------------
.
p3B54 MIDI_Tx_FIFO_Push
k3b57 Put byte into B register
k3b59 Compare head and tail indices
k3b5c FIFO has some data already, so consumer is active
k3b5e FIFO empty, are we transmitting?
k3b62 No, so put byte directly into the UART transmit register
k3b67 And kick the UART into action
#
k3b6a Get head index
k3b6d Put byte into FIFO head
k3b71 Bump head index
#
k3b72 Check if FIFO is full
k3b76 Spin around while the FIFO is full
k3b78 Space now in FIFO, save head index
#
k3b7b Enable UART







###############################################################################
##
## MIDI Message Generators
##
###############################################################################

#==========================================================
n3076
#----------------------------------------------------------
# Function:
#       MIDI_Send_Identity_Reply
#
#       Sends SysEx Identity Reply message
#
# Args:
#       none
#
# Returns:
#       none
#
# Uses:
#       A
#
# Notes:
#----------------------------------------------------------
.
p3076 MIDI_Send_Identity_Reply
k3076 byte: system exclusive status
k307b byte: non-realtime
k3080 Query channel number
k3086 byte: channel number
k3089 byte: sub id #1 - general information
k308e byte: sub id #2 - device identity reply
k3093 byte: manufacturer's id
k3098 byte: synth group lsb
k309d byte: synth group msb
k30a2 byte: k4/k4r id lsb
k30a7 byte: k4/k4r id msb
k30ac byte: format no.00
k30b1 byte: format no.00
k30b6 byte: format no.00
k30bb byte: format no.00
k30c0 byte: EOX

#==========================================================
n3545
#----------------------------------------------------------
# Function:
#       Convert_To_MIDI_Pgm
#
#       Convert internal program number to MIDI program
#       number.
#
# Args:
#       A = prog number
#
# Returns:
#       A = MIDI program number
#
# Uses:
#       A
#
# Notes:
#----------------------------------------------------------
.
p3545 Convert_To_MIDI_Pgm
k3545 If bit 7 is set then this is a multi program
k3548 If not, then mask the single program to 0~63
k354b Map multi pgm to 64~127


#==========================================================
n3489
#----------------------------------------------------------
# Function:
#       MIDI_Send_Prog_Change
#
#       Sends Program Change message
#
# Args:
#       A = prog number
#
# Returns:
#       none
#
# Uses:
#       A
#
# Notes:
#----------------------------------------------------------
.
p3489 MIDI_Send_Prog_Change

k348d Get MIDI Tx control
k3491 If Tx disabled, leave now
k3494 Get MIDI channel and assemble status byte
k349c Check for running status
k349e Same last status byte, so don't resend it
#
k34a5 Send new program number


#==========================================================
n39fe
#----------------------------------------------------------
# Function:
#       MIDI_Send_Note_On
#
#       Sends Note On message
#
# Args:
#       A = velocity
#       X = note number
#
# Returns:
#       none
#
# Uses:
#       C, HL
#
# Notes:
#----------------------------------------------------------
.
p39fe MIDI_Send_Note_On
k39fe ???
k3a02 ???
k3a04 Status byte = $90 | channel number
k3a0c Running status
k3a18 Send note number
k3a1c Send velocity

#==========================================================
n3a20
#----------------------------------------------------------
# Function:
#       MIDI_Send_Note_Off
#
#       Sends Note Off message
#
# Args:
#       A = velocity
#       X = note number
#
# Returns:
#       none
#
# Uses:
#       C, HL
#
# Notes:
#----------------------------------------------------------
.
p3a20 MIDI_Send_Note_Off
k3a20 ???
k3a24 Status byte = $80 | channel number
k3a2c Running status
k3a38 Send note number
k3a3c Send velocity

#==========================================================
n3b9d
#----------------------------------------------------------
# Function:
#       MIDI_Calc_Note_Num
#
#       Convert internal key number into MIDI note number
#
# Args:
#       X = note number
#
# Returns:
#       A = MIDI note number
#
# Uses:
#
# Notes:
#----------------------------------------------------------
.
p3B9D MIDI_Calc_Note_Num
k3bd9 Get keyboard offset
k3ba1 Add note number
k3ba3 Subtract ??? offset


#==========================================================
n3af8
#----------------------------------------------------------
# Function:
#       MIDI_Send_All_Notes_Off
#
#       Sends All Notes Off message
#
# Args:
#       none
#
# Returns:
#       none
#
# Uses:
#       A, HL
#
# Notes:
#----------------------------------------------------------
.
p3af8 MIDI_Send_All_Notes_Off
k3af8 ???
k3afb ???
k3afd Do something with keyboard offset
k3b07 Status byte = $B0 | channel number
k3b0f Running status
k3b1a Send channel mode message
k3b1f Send All Notes Off message


#==========================================================
n3acc
#----------------------------------------------------------
# Function:
#       MIDI_Send_Hold_Switch
#
#       Sends Hold 1 Switch message
#
# Args:
#       A = switch value
#
# Returns:
#       none
#
# Uses:
#       A, C
#
# Notes:
#----------------------------------------------------------
.
p3acc MIDI_Send_Hold_Switch
k3ada Status byte = $B0 | channel number
k3ae2 Running status
k3aed Send control change message
k3af1 Send switch position message

###############################################################################
###############################################################################
###############################################################################
